optical-bead-trajectory-1000fps/
├── README.md                           # Main project readme (20 lines)
├── USAGE_GUIDE.md                      # Comprehensive usage guide (302 lines)
├── CONFIGURATION_EXAMPLES.md           # 16 configuration examples (338 lines)
├── QUICK_REFERENCE.md                  # Quick reference card (205 lines)
├── IMPLEMENTATION_SUMMARY.md           # Complete technical overview (537 lines)
├── requirements.txt                    # Python dependencies
├── pyproject.toml                      # Package configuration
├── Makefile                            # Build automation (install, baselines, ou, train, sample, eval, all)
├── .gitignore                          # Git ignore patterns
├── verify_setup.py                     # Installation verification script (87 lines)
│
├── data/                               # Input data directory (place .mat files here)
│   └── (your .mat files go here)
│
├── out/                                # Output directory (auto-created)
│   └── (results: CSV files, plots, model, eval summary)
│
├── scripts/                            # Runnable scripts
│   ├── run_baselines.py               # Classical methods (cubic, polyphase, FFT) - 29 lines
│   ├── run_ou.py                      # OU-Kalman methods - 24 lines
│   ├── run_train_pgcdi.py             # Train PG-CDI model - 3 lines
│   ├── run_sample_pgcdi.py            # Sample with PG-CDI - 3 lines
│   └── run_eval_all.py                # Evaluate all methods - 42 lines
│
└── src/
    ├── obt1000/                        # Classical & physics-based methods
    │   ├── __init__.py                 # Package init
    │   ├── config.py                   # Configuration dataclasses - 49 lines
    │   ├── io_prep.py                  # MATLAB I/O, CSV export - 24 lines
    │   ├── baselines.py                # Cubic, polyphase, FFT resampling - 28 lines
    │   ├── ou_kalman.py                # OU estimation, Kalman filter/smoother - 76 lines
    │   ├── eval_metrics.py             # RMSE, PSD distance, corner freq - 19 lines
    │   ├── plotting.py                 # Visualization functions - 24 lines
    │   └── utils.py                    # Utility functions - 4 lines
    │
    └── pgcdi/                          # Physics-Guided Conditional Diffusion Imputer
        ├── __init__.py                 # Package init
        ├── data.py                     # Synthetic OU/GLE generation - 32 lines
        ├── model.py                    # 1D UNet architecture - 25 lines
        ├── scheduler.py                # DDPM noise scheduling - 12 lines
        ├── physics_losses.py           # Physics constraint losses - 22 lines
        ├── train.py                    # Training loop - 43 lines
        └── sample.py                   # DDPM sampling - 39 lines

STATISTICS:
- Total Python code: 537 lines
- Total documentation: 1402 lines (5 markdown files)
- Core modules: 13 Python files
- Runnable scripts: 6 (5 pipeline + 1 verification)
- Methods implemented: 6 (3 classical, 2 physics-based, 1 ML)

KEY FEATURES:
✓ Complete pipeline from .mat to 1000 fps CSV
✓ Multiple interpolation methods (classical + physics + ML)
✓ Uncertainty quantification (OU full state-space)
✓ Cross-validation evaluation with multiple metrics
✓ Comprehensive configuration system
✓ Automated build system (Makefile)
✓ Extensive documentation (4 guides + quickref)
✓ Verification script for setup validation
✓ Production-ready code with type hints

METHODS:
1. Cubic Spline          - Classical interpolation
2. Polyphase Resample    - Rational resampling with Kaiser window
3. FFT Resample          - Fourier-domain interpolation
4. OU Continuous Interp  - Physics-based exponential decay
5. OU Full State-Space   - Kalman filter/smoother on 1000 fps grid
6. PG-CDI               - Physics-guided conditional diffusion imputer

OUTPUTS (all in out/):
- 1000fps_cubic_nm.csv
- 1000fps_polyphase_nm.csv
- 1000fps_fft_nm.csv
- 1000fps_ou_interp_nm.csv
- 1000fps_ou_fullgrid_nm.csv (with variance)
- 1000fps_pgcdi_nm.csv
- overlay_cubic_fft.png
- ou_fullgrid_uncertainty.png
- eval_summary.json
- pgcdi.pt (trained model)
